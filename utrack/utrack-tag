#!/usr/bin/python3
#
# uTrack Tag Daemon emulation
#

import sys
import time
import socket
import select
import ctypes
import struct
import array
import argparse
import ipaddress
import netifaces
import random
import json

from pprint import pprint
from ctypes import *


class Config():
    
    dw1000_channel  = 4
    dw1000_pcode    = 18
    dw1000_rate     = 850
    dw1000_txpsr    = 1024
    dw1000_power    = 0x11111111
    dw1000_antd     = 0x4020
    dw1000_sysfs    = '/sys/devices/platform/soc/3f204000.spi/spi_master/spi0/spi0.0/dw1000/'

    period     = 0.250

    if_name    = 'lowpan0'
    if_addr    = None
    if_index   = 0

    anchor_ip  = None
    anchor_eui = None

    twr_addr   = 'ff12::52'
    twr_port   = 62414
    twr_send   = None
    twr_bind   = None
    twr_expr   = 5.0
    
cfg = Config()

ranging_data = { 'twr':None, }


RANGE = 42
RESP1 = 43
TIMES = 44
RESP2 = 45
FINAL = 46

UDP6_ERR_QUEUE_OFFSET = 31


for name,value in (
        ('SO_TIMESTAMPING', 37),
        ('SO_SELECT_ERR_QUEUE', 45),
	('SOF_TIMESTAMPING_TX_HARDWARE',  (1<<0)),
  	('SOF_TIMESTAMPING_TX_SOFTWARE',  (1<<1)),
        ('SOF_TIMESTAMPING_RX_HARDWARE',  (1<<2)),
        ('SOF_TIMESTAMPING_RX_SOFTWARE',  (1<<3)),
        ('SOF_TIMESTAMPING_SOFTWARE',     (1<<4)),
        ('SOF_TIMESTAMPING_SYS_HARDWARE', (1<<5)),
        ('SOF_TIMESTAMPING_RAW_HARDWARE', (1<<6)),
        ('SOF_TIMESTAMPING_OPT_ID',       (1<<7)),
        ('SOF_TIMESTAMPING_TX_SCHED',     (1<<8)),
        ('SOF_TIMESTAMPING_TX_ACK',       (1<<9)),
        ('SOF_TIMESTAMPING_OPT_CMSG',     (1<<10)),
        ('SOF_TIMESTAMPING_OPT_TSONLY',   (1<<11)),
        ('SOF_TIMESTAMPING_OPT_STATS',    (1<<12)),
        ('SOF_TIMESTAMPING_OPT_PKTINFO',  (1<<13)),
        ('SOF_TIMESTAMPING_OPT_TX_SWHW',  (1<<14))):
    if not hasattr(socket, name):
        setattr(socket, name, value)


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def dprint(*args, **kwargs):
    #print(*args, file=sys.stderr, **kwargs)
    pass


class Timespec(Structure):

    _fields_ = [("tv_sec", c_long),
                ("tv_nsec", c_long)]

    def __iter__(self):
        return ((x[0], getattr(self,x[0])) for x in self._fields_)

    def __int__(self):
        return ((self.tv_sec * 1000000000 + self.tv_nsec) << 32)

    def __str__(self):
        return '%#x' % int(self)

    def __bool__(self):
        return bool(self.tv_sec or self.tv_nsec)


class Timehires(Structure):

    _fields_ = [
        ("tv_nsec", c_uint64),
        ("tv_frac", c_uint32),
        ("__res", c_uint32) ]

    def __iter__(self):
        return ((x[0], getattr(self,x[0])) for x in self._fields_)

    def __int__(self):
        return ((self.tv_nsec << 32) | self.tv_frac)

    def __str__(self):
        return '%#x' % int(self)

    def __bool__(self):
        return bool(self.tv_nsec or self.tv_frac)


class TimestampInfo(Structure):

    _fields_ = [
        ("rawts", c_uint64),
        ("lqi", c_uint16),
        ("snr", c_uint16),
        ("fpr", c_uint16),
        ("noise", c_uint16),
        ("rxpacc", c_uint16),
        ("fp_index", c_uint16),
        ("fp_ampl1", c_uint16),
        ("fp_ampl2", c_uint16),
        ("fp_ampl3", c_uint16),
        ("cir_pwr", c_uint32),
        ("fp_pwr", c_uint32),
        ("ttcko", c_uint32),
        ("ttcki", c_uint32),
    ]

    def __iter__(self):
        return ((x[0], getattr(self,x[0])) for x in self._fields_)


class Timestamp(Structure):

    _fields_ = [
        ("sw", Timespec),
        ("legacy", Timespec),
        ("hw", Timespec),
        ("hires", Timehires),
        ("tsinfo", TimestampInfo),
    ]

    def __iter__(self):
        return ((x[0], getattr(self,x[0])) for x in self._fields_)


def GetNextID():
    return random.randint(0,0xFFFFFFFFFFFFFFFF)


def SetDWAttr(attr, data):
    fd = open(cfg.dw1000_sysfs + attr, 'w')
    fd.write(str(data))
    fd.close()

def GetDWAttr(attr):
    fd = open(cfg.dw1000_sysfs + attr, 'r')
    val = fd.read().rstrip()
    fd.close()
    return val


def GetTagEUI(addr):
    ip = ipaddress.ip_address(addr)
    if ip.is_link_local:
        tag = bytearray(ip.packed[8:])
        tag[0] ^= 0x02
        return tag.hex()
    else:
        return None


def GetAnclTs(ancl):
    tss = Timestamp()
    for cmsg_level, cmsg_type, cmsg_data in ancl:
        if (cmsg_level == socket.SOL_SOCKET and cmsg_type == socket.SO_TIMESTAMPING):
            raw = cmsg_data.ljust(sizeof(Timestamp), b'\0')
            tss = Timestamp.from_buffer_copy(raw)
    return tss


def SendRANGE(bsock,rid):
    ranging_data['twr'] = {
        'rid'     : rid,
        'start'   : time.time(),
        'expire'  : time.time() + cfg.twr_expr,
        'times'   : [None,None,None,None],
    }
    msg = struct.pack('!BQ', RANGE, rid)
    dprint('SendRANGE()')
    bsock.sendto(msg, cfg.twr_send)

def SendTIMES(bsock,rid):
    dat = ranging_data['twr']
    msg = struct.pack('!BQQQ', TIMES, rid, dat['times'][0], dat['times'][1])
    dprint('SendTIMES()')
    bsock.sendto(msg, cfg.twr_send)

def SendFINAL(bsock,rid):
    dat = ranging_data['twr']
    msg = struct.pack('!BQQQ', FINAL, rid, dat['times'][2],dat['times'][3])
    dprint('SendFINAL()')
    bsock.sendto(msg, cfg.twr_send)


def RecvMsg(bsock):
    (data,ancl,flags,rem) = bsock.recvmsg(4096, 1024, 0)
    (cmd,rid) = struct.unpack('!BQ', data[0:9])
    tss = GetAnclTs(ancl)
    dat = ranging_data['twr']
    #dprint('RecvMsg {} {} {}'.format(rid,cmd,tss.tsinfo.rawts))
    if dat['rid'] == rid:
        if cmd == RESP1:
            dat['times'][1] = tss.tsinfo.rawts
            SendTIMES(bsock,rid)
        elif cmd == RESP2:
            dat['times'][3] = tss.tsinfo.rawts
            SendFINAL(bsock,rid)

def GetTxTime(bsock):
    (data,ancl,_,_) = bsock.recvmsg(4096, 1024, socket.MSG_ERRQUEUE)
    udp6 = data[UDP6_ERR_QUEUE_OFFSET:]
    (cmd,rid) = struct.unpack('!BQ', udp6[0:9])
    tss = GetAnclTs(ancl)
    dat = ranging_data['twr']
    #dprint('TxTime {} {} {}'.format(rid,cmd,tss.tsinfo.rawts))
    if dat['rid'] == rid:
        if cmd == RANGE:
            dat['times'][0] = tss.tsinfo.rawts
        elif cmd == TIMES:
            dat['times'][2] = tss.tsinfo.rawts


def SocketLoop():
    
    bsock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)
    bsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    ireq = struct.pack('I', cfg.if_index)
    bsock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_IF, ireq)
    
    addr = socket.inet_pton(socket.AF_INET6, cfg.twr_addr)
    mreq = struct.pack('16sI', addr, cfg.if_index)
    bsock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_JOIN_GROUP, mreq)

    bsock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, 0)
    bsock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_HOPS, 1)

    bsock.setsockopt(socket.SOL_SOCKET, socket.SO_TIMESTAMPING,
                     socket.SOF_TIMESTAMPING_RX_HARDWARE |
                     socket.SOF_TIMESTAMPING_TX_HARDWARE |
                     socket.SOF_TIMESTAMPING_RAW_HARDWARE)
    
    bsock.bind(cfg.twr_bind)
    
    pobj = select.poll()
    pobj.register(bsock, select.POLLIN)

    next = time.time() + cfg.period
    
    while True:
        now = time.time()
        if now < next:
            fds = pobj.poll( 1000*(next-now) )
            for (fd,flags) in fds:
                if fd == bsock.fileno():
                    if flags & select.POLLERR:
                        GetTxTime(bsock)
                    if flags & select.POLLIN:
                        RecvMsg(bsock)
        else:
            next = now + cfg.period
            SendRANGE(bsock,GetNextID())


def main():
    
    global cfg

    random.seed()
    
    parser = argparse.ArgumentParser(description="uTrack Tag Daemon")
    
    parser.add_argument('-i', '--interface', type=str, default=cfg.if_name)
    parser.add_argument('-p', '--port', type=int, default=cfg.twr_port)
    
    args = parser.parse_args()

    cfg.if_name   = args.interface
    cfg.if_addr   = netifaces.ifaddresses(args.interface)
    cfg.if_index  = socket.if_nametoindex(args.interface)
    
    cfg.anchor_link  = cfg.if_addr.get(netifaces.AF_INET6)[0]['addr']
    cfg.anchor_eui   = cfg.if_addr.get(netifaces.AF_PACKET)[0]['addr'].replace(':', '')
    cfg.anchor_ip    = cfg.anchor_link.split('%')[0]

    cfg.twr_bind  = ('', cfg.twr_port, 0, cfg.if_index)
    cfg.twr_send  = (cfg.twr_addr, cfg.twr_port, 0, cfg.if_index)

    SetDWAttr('channel', cfg.dw1000_channel)
    SetDWAttr('pcode', cfg.dw1000_pcode)
    SetDWAttr('rate', cfg.dw1000_rate)
    SetDWAttr('txpsr', cfg.dw1000_txpsr)
    SetDWAttr('smart_power', 0)
    SetDWAttr('tx_power', cfg.dw1000_power)
    SetDWAttr('antd', cfg.dw1000_antd)
    
    SocketLoop()
    


if __name__ == "__main__":
    main()


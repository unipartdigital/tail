#!/usr/bin/python3
#
# uTrack Connector example client
#

import argparse
import socket
import json

UTRACK_SERVER = 'localhost'
UTRACK_PORT = 6299


class TailPipe:

    def __init__(self):
        self.inet = None
        self.addr = None
        self.port = None
        self.sock = None
        self.buff = b''
        
    def connect(self, addr, port, ipv6=False):
        self.buff = b''
        self.addr = addr
        self.port = port
        if ipv6:
            self.inet = socket.AF_INET6
        else:
            self.inet = socket.AF_INET
        self.sock = socket.socket(self.inet, socket.SOCK_STREAM)
        self.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
        self.sock.connect(socket.getaddrinfo(self.addr,self.port,self.inet)[0][4])

    def close(self):
        if self.sock is not None:
            self.sock.close()
            self.sock = None
            self.buff = b''

    def recv(self):
        data = self.sock.recv(4096)
        if len(data) < 1:
            raise BrokenPipeError
        return data

    def recvmsg(self):
        while not self.hasmsg():
            self.fillmsg()
        return self.getmsg()

    def fillmsg(self):
        try:
            self.buff += self.recv()
        except ConnectionResetError:
            raise BrokenPipeError

    def hasmsg(self):
        return (self.buff.find(31) > 0)

    def getmsg(self):
        eom = self.buff.find(31)
        if eom > 0:
            msg = self.buff[0:eom]
            self.buff = self.buff[eom+1:]
            return msg
        elif eom == 0:
            self.buff = self.buff[1:]
        return None

    def send(self,data):
        self.sock.send(data)

    def sendmsg(self,data):
        self.send(data + b'\x1f')

    

def SocketLoop(host,port,ipv6):
    pipe = TailPipe()
    try:
        pipe.connect(host,port,ipv6)
        while True:
            msg = pipe.recvmsg().decode()
            tag = json.loads(msg)
            print('Tag: <{}> distance: {:.3f}m'.format(tag['EUI'], tag['Dist']/1000))

    except KeyboardInterrupt:
        print('Good bye.')
    except Exception as err:
        print('ERROR: {}'.format(err))


def main():
    
    parser = argparse.ArgumentParser(description="uTrack Connector client example")
    
    parser.add_argument('-s', '--server', type=str, default=UTRACK_SERVER)
    parser.add_argument('-p', '--port', type=int, default=UTRACK_PORT)
    parser.add_argument('-6', '--ipv6', action='store_true', default=False)
    
    args = parser.parse_args()
    
    SocketLoop(args.server,args.port,args.ipv6)
    

if __name__ == "__main__":
    main()

